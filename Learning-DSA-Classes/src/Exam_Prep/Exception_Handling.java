//package Exam_Prep;
////Explain all the methods for managing threads in Java
//public class Exception_Handling {
//    /*
//    Thread in Java
//
//Thread = ‡§è‡§ï lightweight process, ‡§ú‡•ã program ‡§ï‡•á ‡§Ö‡§Ç‡§¶‡§∞ independent execution flow ‡§¶‡•á‡§§‡§æ ‡§π‡•à‡•§
//
//Java ‡§Æ‡•á‡§Ç threads create ‡§î‡§∞ manage ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è java.lang.Thread class ‡§î‡§∞ Runnable interface use ‡§π‡•ã‡§§‡•Ä ‡§π‡•à‡§Ç‡•§
//
//üîπ Methods for Managing Threads in Java
//1. start()
//
//Thread start ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è use ‡§π‡•ã‡§§‡•Ä ‡§π‡•à‡•§
//
//JVM ‡§ï‡•ã ‡§¨‡§§‡§æ‡§§‡§æ ‡§π‡•à ‡§ï‡§ø ‡§Ø‡§π thread ready ‡§π‡•à ‡§î‡§∞ run() method execute ‡§π‡•ã‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è‡•§
//
//Thread t = new Thread();
//t.start(); // calls run() internally
//
//2. run()
//
//Thread ‡§ï‡•á actual code ‡§ï‡•ã define ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§
//
//Directly call ‡§® ‡§ï‡§∞‡•á‡§Ç, ‡§π‡§Æ‡•á‡§∂‡§æ start() ‡§∏‡•á call ‡§ï‡§∞‡•á‡§Ç‡•§
//
//public void run() {
//    System.out.println("Thread is running");
//}
//
//3. sleep(long millis)
//
//Thread ‡§ï‡•ã specified milliseconds ‡§ï‡•á ‡§≤‡§ø‡§è pause ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§
//
//Static method ‡§π‡•à‡•§
//
//InterruptedException throw ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•à‡•§
//
//Thread.sleep(1000); // 1 second pause
//
//4. join()
//
//Current thread wait ‡§ï‡§∞‡§§‡§æ ‡§π‡•à until another thread finish ‡§π‡•ã ‡§ú‡§æ‡§è‡•§
//
//t.join(); // main thread waits for t to complete
//
//5. yield()
//
//Current thread voluntarily CPU ‡§õ‡•ã‡§°‡§º‡§§‡§æ ‡§π‡•à ‡§§‡§æ‡§ï‡§ø same priority ‡§µ‡§æ‡§≤‡•á ‡§¶‡•Ç‡§∏‡§∞‡•á threads run ‡§ï‡§∞ ‡§∏‡§ï‡•á‡§Ç‡•§
//
//Thread.yield();
//
//6. setPriority(int newPriority) & getPriority()
//
//Thread ‡§ï‡•Ä priority set ‡§î‡§∞ get ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è‡•§
//
//Priority range: Thread.MIN_PRIORITY(1) ‚Üí Thread.MAX_PRIORITY(10)
//
//t.setPriority(Thread.MAX_PRIORITY);
//int p = t.getPriority();
//
//7. isAlive()
//
//Check ‡§ï‡§∞‡§§‡§æ ‡§π‡•à ‡§ï‡§ø thread abhi ‡§≠‡•Ä run ‡§π‡•ã ‡§∞‡§π‡§æ ‡§π‡•à ‡§Ø‡§æ dead ‡§π‡•ã ‡§ó‡§Ø‡§æ ‡§π‡•à‡•§
//
//if(t.isAlive()) {
//    System.out.println("Thread is running");
//}
//
//8. interrupt()
//
//Thread ‡§ï‡•ã interrupt ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è use ‡§π‡•ã‡§§‡§æ ‡§π‡•à‡•§
//
//Mostly thread ‡§ú‡•ã sleep() ‡§Ø‡§æ wait() ‡§Æ‡•á‡§Ç ‡§π‡•à, ‡§â‡§∏‡•á interrupt ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§
//
//t.interrupt();
//
//9. setName(String name) & getName()
//
//Thread ‡§ï‡§æ ‡§®‡§æ‡§Æ set ‡§î‡§∞ get ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è‡•§
//
//t.setName("MyThread");
//System.out.println(t.getName());
//
//10. currentThread()
//
//‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® executing thread return ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§
//
//Thread t = Thread.currentThread();
//System.out.println(t.getName());
//
//11. stop() (Deprecated)
//
//Thread ‡§ï‡•ã forcibly stop ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è‡•§
//
//Unsafe ‡§π‡•à, ‡§á‡§∏‡§≤‡§ø‡§è use ‡§® ‡§ï‡§∞‡•á‡§Ç‡•§
//     */
//
//
//
//    class MyThread extends Thread {
//        public void run() {
//            for(int i=1; i<=5; i++) {
//                System.out.println(i + " " + Thread.currentThread().getName());
//                try { Thread.sleep(500); } catch (InterruptedException e) {}
//            }
//        }
//    }
//
//    public class TestThread {
//        public static void main(String[] args) throws Exception {
//            MyThread t1 = new MyThread();
//            t1.setName("Thread-1");
//            t1.start();
//            t1.join(); // main thread waits
//
//            System.out.println("Main thread ends");
//        }
//    }
//
//}
